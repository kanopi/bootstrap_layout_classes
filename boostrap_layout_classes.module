<?php

/**
 * @file
 * Entity Class Formatter module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Component\Utility\Html;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Field\FieldItemListInterface;

/**
 * Implements hook_help().
 */
function boostrap_layout_classes_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.boostrap_layout_classes':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Provides functionality for editing and rendering Bootstrap layout classes.
      Uses a plain text field to store bootstrap layout classes (container, row, col, margin, padding, gutter, offset, order, align, justify).') . '</p>';
      $output .= '<h3>' . t('Configuration') . '</h3>';
      $output .= '<h5>' . t('Field') . '</h5>';
      $output .= '<p>' . t('On the desired content or paragraph type create a plain text field (cardinality of limited 1), e.g. <b>field_layout</b>.') . '</p>';
      $output .= '<h5>' . t('Widget') . '</h5>';
      $output .= '<p>' . t('Set the form display to "Boostrap Layout Classes" and use the options to choose which layout classes to allow.') . '</p>';
      $output .= '<h5>' . t('Formatter') . '</h5>';
      $output .= '<p>' . t('Set the display to a hidden label and "Boostrap Layout Classes" formatter.') . '</p>';
      
      return $output;
  }
}

/**
 * Implements hook_entity_view_alter().
 */
function boostrap_layout_classes_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {

  // Skip entities which are not holding fields.
  if (!($entity instanceof FieldableEntityInterface)) {
    return;
  }
  $fields = [];

  // Get fields from standard manage display form.
  foreach ($display->getComponents() as $name => $component) {

    // Only if Entity Class formatter is used.
    if (isset($component['type']) && $component['type'] === 'boostrap_layout_classes_formatter') {
      $fields[$name][] = !empty($component['settings']) ? $component['settings'] : [];
    }
  }

  // Process all discovered fields.
  foreach ($fields as $name => $settings_set) {
    if (!$entity->hasField($name)) {
      continue;
    }
    $field = $entity->get($name);

    // Apply settings of every field instance.
    foreach ($settings_set as $settings) {
      _boostrap_layout_classes_apply($build, $field, $settings);
    }
  }
}

/**
 * Applies all field values using defined settings.
 */
function _boostrap_layout_classes_apply(array &$build, FieldItemListInterface $field, array $settings) {
  $values = [];
  $field_definition = $field->getFieldDefinition();

  // Only for boolean field type.
  if ($field_definition->getType() === 'boolean') {

    // Fill configured label based on value.
    if (filter_var($field->value, FILTER_VALIDATE_BOOLEAN)) {
      $label = $field_definition->getSetting('on_label');
    }
    else {
      $label = $field_definition->getSetting('off_label');
    }
    $values[] = $label;
  }

  // For other simple fields.
  else {
    foreach ($field->getValue() as $item) {

      // Fill value if not empty.
      if (!empty($item['value'])) {

        // Split value into multiple classes when spaces are used.
        foreach (explode(' ', $item['value']) as $class) {
          $values[] = $class;
        }
      }
    }
  }

  // Process all discovered values.
  foreach ($values as $value) {
    $build['#attributes']['class'][] = Html::getClass($value);
  }
}
